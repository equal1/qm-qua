[tool.poetry]
name = "qm-qua"
version = "1.1.6"
description = "QUA language SDK to control a Quantum Computer"
readme = "README.md"
authors = ["Quantum Machines <info@quantum-machines.co>"]

packages = [
    { include = "qm" },
    { include = "qm/py.typed" }
]
include = [
    "CHANGELOG.md",
    "LICENSE",
    "qm/io/**/*",
    "qm/grpc/**/*.py",
]

[tool.poetry.dependencies]
python = ">=3.7, <3.12"
grpcio = [
    {version = "^1.39.0", python = ">=3.7,<3.11"},
    {version = "^1.57", python = ">=3.11"}
]
protobuf = [
    {version = "^3.17.3", python = ">=3.7,<3.11"},
    {version = "^4.24", python = ">=3.11"}
]
betterproto = [
    {version = "2.0.0b5", python = ">=3.7,<3.11"},
    {version = "2.0.0b6", python = "==3.11"}
]
marshmallow = "3"
marshmallow-polyfield = "^5.7"
numpy = [
    {version = "^1.17.0", python = ">=3.7,<3.11"},
    {version = "^1.24", python = ">=3.11"}
]
tinydb = "^4.6.1"
certifi = { version = "*", optional = true }
datadog-api-client = "^2.6.0"
deprecation = "^2.1.0"
dependency_injector = "^4.41.0"
qm-octave = "~2.0.1"
typing-extensions = "^4.5"

grpclib = { version = "^0.4.5", python = ">=3.10", allow-prereleases = true }
plotly = "^5.13.0"
httpx = { version = "^0.23.3", extras = ["http2"] }

[tool.poetry.dev-dependencies]
grpcio-tools = [
    {version = "^1.39.0", python = ">=3.7,<3.11"},
    {version = "^1.57", python = ">=3.11"}
]
coverage = "^7.0.1"
pytest-asyncio = "^0.20.3"
pytest-benchmark = { extras = ["aspect"], version = "^4.0.0" }

black = "^22.6.0"
flake8 = "^3.9.2"
importlib-metadata = { version = "^4.0.0", python = "~3.7" }
pytest = "^7.0.0"
flake8-bugbear = "^21.11.29"
poethepoet = "^0.16.0"
pytest-order = "^1.0.0"

Sphinx = "^4.3.1"
sphinx-rtd-theme = "^1.0.0"
sphinxcontrib-redoc = "^1.6.0"
apispec = "^5.1.1"
sphinx-toolbox = "^2.15.2"
poetry-dynamic-versioning = { extras = ["plugin"], version = "^0.21.2" }

mypy = "^1.1.1"
isort = "*"

[tool.poetry.extras]
simulation = ["certifi"]

[tool.black]
line-length = 120
target-version = ["py37"]
extend-exclude = '''
/(
  | qm/grpc/.*
  | qm/io/.*
)/
'''

[tool.isort]
profile = "black"
line_length = 120
length_sort = true
skip_gitignore = true
force_sort_within_sections = true
extra_standard_library = ["typing_extensions"]


[tool.poe.tasks]

[tool.poe.tasks.build-docs]
sequence = [
    { script = "shutil:rmtree('dist/docs', ignore_errors=True)" },
    { cmd = "poetry run python ./docs_sphinx/build_config_schema.py" },
    { cmd = "sphinx-build -b html docs_sphinx dist/docs -W --keep-going" },
    { script = "shutil:copyfile('docs_sphinx/spec.json', 'dist/docs/qm_config_spec.json')" },
]
help = "Build project documentation site"

[tool.poe.tasks.clean-grpc]
sequence = [
    { "script" = "shutil:rmtree('qm/grpc', ignore_errors=True)" },
    { "script" = "shutil:rmtree('qm/pb', ignore_errors=True)" }
]
help = "Deletes gRPC generated files"

[tool.poe.tasks.generate-grpc-api]
cmd = '''
poetry run python -m grpc_tools.protoc -Iproto --python_betterproto_out=.
qm/pb/compiler.proto
qm/pb/errors.proto
qm/pb/frontend.proto
qm/pb/general_messages.proto
qm/pb/inc_qm_api.proto
qm/pb/inc_qua.proto
qm/pb/inc_qua_config.proto
qm/pb/job_manager.proto
qm/pb/job_results.proto
qm/pb/qm_manager.proto
'''
help = "Generate gRPC python files for communicating with QUA machine"

[tool.poe.tasks.generate-grpc-sim]
cmd = '''
poetry run python -m grpc_tools.protoc -Iproto --python_betterproto_out=.
qm/grpc/quantum_simulator/v1/physical_system.proto
'''
help = "Generate gRPC python files for describing a physical system for the quantum simulator"

[tool.poe.tasks.generate-grpc-qua]
cmd = '''
poetry run python -m grpc_tools.protoc -Iproto --python_betterproto_out=qm
io/qualang/api/v1/info_service.proto
'''
help = "Generate gRPC python files that existed in the qua repo"

[tool.poe.tasks.generate-grpc-qua-clean]
sequence = [
    { "script" = "shutil:rmtree('io', ignore_errors=True)" }
]
help = "Deletes redundent gRPC generated files"


[tool.poe.tasks.remove-root-init]
script = "os:remove('__init__.py')"
help = "Remove the root __init__.py file generated by generate-grpc-sim"

[tool.poe.tasks.generate-grpc]
sequence = ["clean-grpc", "generate-grpc-api", "generate-grpc-sim", "generate-grpc-qua", "generate-grpc-qua-clean", "remove-root-init"]
help = "Generate gRPC python files"

[tool.poe.tasks.format-black]
cmd = "black qm"
help = "Format source files according to the style rules"

[tool.poe.tasks.format-isort]
cmd = "isort qm"
help = "Fixes imports"

[tool.poe.tasks.format]
sequence = ["format-black", "format-isort"]

[tool.poe.tasks.check-links]
cmd = "sphinx-build -b linkcheck docs_sphinx dist/check-links"
help = "Checks that the links are valid"

[tool.poe.tasks.check-format]
cmd = "black qm --check"
help = "Check that all files are formatted according to the style rules"

[tool.poe.tasks.lint]
cmd = "flake8 qm"
help = "Check for lint errors"

[tool.poe.tasks.test]
cmd = "pytest tests"
help = "Run all unit tests"

[tool.poe.tasks.mypy]
cmd = "mypy qm"

[tool.poe.tasks.check]
sequence = ["mypy", "check-format", "lint", "test"]
help = "Perform all check possible on the code"

[tool.poe.tasks.pre-commit-hook]
sequence = ["format", "mypy", "lint"]
help = "Formats and performs type hint checks and lint checks"

[tool.poe.tasks.check-grpc-breaking-changes]
cmd = "buf breaking --against '.git#branch=main'"
help = "Check if the API broke against the main branch"

[tool.poetry-dynamic-versioning]
enable = false

[tool.poetry-dynamic-versioning.substitution]
files = ["qm/version.py"]
patterns = ["(^__version__\\s*(?::.*?)?=\\s*['\"])[^'\"]*(['\"])"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"